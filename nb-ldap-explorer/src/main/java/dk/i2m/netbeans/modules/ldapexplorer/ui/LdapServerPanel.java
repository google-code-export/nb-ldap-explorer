/*
 *  Copyright 2010 Interactive Media Management
 * 
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *  under the License.
 */
package dk.i2m.netbeans.modules.ldapexplorer.ui;

/**
 * Panel showing the properties of an {@link LdapServer}.
 *
 * @author Allan Lykke Christensen
 */
public class LdapServerPanel extends javax.swing.JPanel {

    /** 
     * Creates new instance of {@link LdapServerPanel}.
     */
    public LdapServerPanel() {
        initComponents();
    }

    public void setHostname(String hostname) {
        this.txtHostname.setText(hostname);
    }

    public String getHostname() {
        return txtHostname.getText();
    }

    public void setLabel(String label) {
        this.txtLabel.setText(label);
    }

    public String getLabel() {
        return txtLabel.getText();
    }

    public void setPort(Integer port) {
        this.txtPort.setText(String.valueOf(port));
    }

    public Integer getPort() {
        try {
            return Integer.valueOf(txtPort.getText());
        } catch (NumberFormatException ex) {
            return 0;
        }
    }

    public void setTimeout(Integer timeout) {
        this.txtTimeout.setText(String.valueOf(timeout));
    }

    public Integer getTimeout() {
        try {
            return Integer.valueOf(txtTimeout.getText());
        } catch (NumberFormatException ex) {
            return 0;
        }
    }

    public void setBaseDN(String basedn) {
        this.txtBaseDn.setText(basedn);
    }

    public String getBaseDN() {
        return txtBaseDn.getText();
    }

    public String getAuthentication() {
        return ((String) cbAuthentication.getSelectedItem()).toUpperCase();
    }

    public void setAuthentication(String authentication) {
        // Capitalize
        String auth = authentication.substring(0, 1).toUpperCase();
        auth = auth + authentication.substring(1).toLowerCase();

        cbAuthentication.setSelectedItem(auth);
    }

    public String getBind() {
        return txtBind.getText();
    }

    public void setBind(String bind) {
        this.txtBind.setText(bind);
    }

    public String getPassword() {
        return new String(txtPassword.getPassword());
    }

    public void setPassword(String password) {
        this.txtPassword.setText(password);
    }

    /**
     * Determines if secure socket layer should be enabled for the connection.
     *
     * @return <code>true</code> if secure socket layer should be enabled,
     *         otherwise <code>false</code>
     */
    public boolean isSecureSocketLayerEnabled() {
        return this.cbSecure.isSelected();
    }

    /**
     * Sets the secure socket layer requirement for the connection.
     *
     * @param enableSsl
     *          <code>true</code> if secure socket layer is required for
     *          the connection, otherwise <code>false</code>
     */
    public void setSecureSocketLayerEnabled(boolean enableSsl) {
        this.cbSecure.setSelected(enableSsl);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     *
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTabbed = new javax.swing.JTabbedPane();
        pnlConnection = new javax.swing.JPanel();
        lblHost = new javax.swing.JLabel();
        txtHostname = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        lblBaseDn = new javax.swing.JLabel();
        txtBaseDn = new javax.swing.JTextField();
        lblAuthentication = new javax.swing.JLabel();
        cbAuthentication = new javax.swing.JComboBox();
        lblBind = new javax.swing.JLabel();
        txtBind = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        cbSecure = new javax.swing.JCheckBox();
        lblLabel = new javax.swing.JLabel();
        txtLabel = new javax.swing.JTextField();
        lblTimeout = new javax.swing.JLabel();
        txtTimeout = new javax.swing.JTextField();

        lblHost.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblHost.text")); // NOI18N

        txtHostname.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtHostname.text")); // NOI18N

        lblPort.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblPort.text")); // NOI18N

        txtPort.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtPort.text")); // NOI18N

        lblBaseDn.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblBaseDn.text")); // NOI18N

        txtBaseDn.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtBaseDn.text")); // NOI18N

        lblAuthentication.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblAuthentication.text")); // NOI18N

        cbAuthentication.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Simple" }));

        lblBind.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblBind.text")); // NOI18N

        txtBind.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtBind.text")); // NOI18N

        lblPassword.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblPassword.text")); // NOI18N

        txtPassword.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtPassword.text")); // NOI18N

        cbSecure.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.cbSecure.text")); // NOI18N

        lblLabel.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblLabel.text")); // NOI18N

        txtLabel.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtLabel.text")); // NOI18N

        lblTimeout.setLabelFor(txtTimeout);
        lblTimeout.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.lblTimeout.text")); // NOI18N

        txtTimeout.setText(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.txtTimeout.text")); // NOI18N

        org.jdesktop.layout.GroupLayout pnlConnectionLayout = new org.jdesktop.layout.GroupLayout(pnlConnection);
        pnlConnection.setLayout(pnlConnectionLayout);
        pnlConnectionLayout.setHorizontalGroup(
            pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlConnectionLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblLabel)
                    .add(lblHost)
                    .add(lblPort)
                    .add(lblTimeout)
                    .add(lblBaseDn)
                    .add(lblAuthentication)
                    .add(lblBind)
                    .add(lblPassword))
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(pnlConnectionLayout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtBind, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .add(txtPassword, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, cbAuthentication, 0, 291, Short.MAX_VALUE)
                            .add(txtBaseDn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .add(cbSecure)
                            .add(txtLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)))
                    .add(pnlConnectionLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(txtHostname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, txtTimeout)
                                .add(org.jdesktop.layout.GroupLayout.LEADING, txtPort, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        pnlConnectionLayout.setVerticalGroup(
            pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlConnectionLayout.createSequentialGroup()
                .addContainerGap()
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblLabel)
                    .add(txtLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblHost)
                    .add(txtHostname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblPort)
                    .add(txtPort, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblTimeout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(txtTimeout, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblBaseDn)
                    .add(txtBaseDn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cbSecure)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblAuthentication)
                    .add(cbAuthentication, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblBind)
                    .add(txtBind, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(pnlConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(lblPassword)
                    .add(txtPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pnlTabbed.addTab(org.openide.util.NbBundle.getMessage(LdapServerPanel.class, "LdapServerPanel.pnlConnection.TabConstraints.tabTitle"), pnlConnection); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pnlTabbed, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(pnlTabbed)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbAuthentication;
    private javax.swing.JCheckBox cbSecure;
    private javax.swing.JLabel lblAuthentication;
    private javax.swing.JLabel lblBaseDn;
    private javax.swing.JLabel lblBind;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblLabel;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblTimeout;
    private javax.swing.JPanel pnlConnection;
    private javax.swing.JTabbedPane pnlTabbed;
    private javax.swing.JTextField txtBaseDn;
    private javax.swing.JTextField txtBind;
    private javax.swing.JTextField txtHostname;
    private javax.swing.JTextField txtLabel;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtTimeout;
    // End of variables declaration//GEN-END:variables
}
